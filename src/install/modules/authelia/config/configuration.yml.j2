#jinja2:lstrip_blocks: True
{%- import 'secrets.j2' as secrets with context -%}
---
#
## === network ===
#
server:
  address: 0.0.0.0:9091/
  buffers:
    read: 4096
    write: 4096


#
## === system ===
#
log:
  level: info
  file_path: /log/authelia.log

# userland
theme: dark

#
## === security ===
#
access_control:
  default_policy: deny
  rules:
    ## admin services
    # AdGuardHome
    - domain: "adguardhome-dashboard.{{ pinanas.domain }}"
      policy: two_factor
      subject:
      - "group:admin"
    # Duplicati
    - domain: "backup.{{ pinanas.domain }}"
      policy: two_factor
      subject:
      - "group:admin"
    # Netdata
    - domain: "resources.{{ pinanas.domain }}"
      policy: one_factor
      subject:
      - "group:admin"
    ## user services
    # Heimdall
    - domain: "apps.{{ pinanas.domain }}"
      policy: one_factor
      subject:
      - "group:user"
    # Jellyfin
    - domain: "media.{{ pinanas.domain }}"
      policy: bypass
    # Nextcloud
    - domain: "cloud.{{ pinanas.domain }}"
      policy: bypass
    # Immich
    - domain: "portfolio.{{ pinanas.domain }}"
      policy: bypass

    ##Â external services
    {% if pinanas.services is defined %}
      {% for service in pinanas.services %}
    {% raw %}#{% endraw %} {{ service.name | capitalize }}
    - domain: "{{ service.name }}.{{ pinanas.domain }}"
      policy: "{{ service.policy | default('two_factor') }}"
        {% if service.policy is not defined or service.policy != "bypass" %}
      subject:
          {% for group in service.groups | default(['admin']) %}
      - "group:{{ group }}"
          {% endfor %}
        {% endif %}
      {% endfor %}
    {% endif %}

#
## === authentication ===
#
identity_validation:
  reset_password:
    jwt_secret: "{{ secrets.make_secret('pinanas.authelia.jwt_secret') }}"

totp:
  issuer: authelia.com
  period: 30
  skew: 1

authentication_backend:
  password_reset:
    disable: false
  refresh_interval: 5m
  file:
    path: /config/users_database.yml
    password:
      algorithm: argon2id
      iterations: 1
      key_length: 32
      salt_length: 16
      memory: 64
      parallelism: 8

session:
  name: authelia_session
  secret: "{{ secrets.make_secret('pinanas.authelia.session.secret') }}"
  same_site: lax
  expiration: 2h
  inactivity: 15m
  remember_me: 1M
  cookies:
    - domain: {{ pinanas.domain }}
      authelia_url: "https://auth.{{ pinanas.domain }}:{{ pinanas.ports.https }}/"
      default_redirection_url: "https://apps.{{ pinanas.domain }}:{{ pinanas.ports.https }}/"

regulation:
  max_retries: 5
  find_time: 2m
  ban_time: 5m

storage:
  encryption_key: "{{ secrets.make_secret('pinanas.authelia.storage.encryption_key') }}"
  local:
    path: /config/db.sqlite3

notifier:
  disable_startup_check: true
  smtp:
    username: "{{ pinanas.network.smtp.username }}"
    password: "{{ pinanas.network.smtp.password }}"
    sender: "{{ pinanas.network.smtp.sender }}"
    address: "{{ pinanas.network.smtp.host }}:{{ pinanas.network.smtp.port }}"


#
## === oidc ===
#

identity_providers:
  oidc:
    ## oidc configuration
    hmac_secret: "{{ secrets.make_secret('pinanas.authelia.identity_providers.oidc.hmac_secret') }}"
    jwks:
      - key_id: default
        key: |
          {{ 'indent=10' | authelia_sshkey }}
    lifespans:
      refresh_token: 90m
      access_token: 1h
      authorize_code: 1m
      id_token: 1h
    enable_client_debug_messages: false

    ## applications
    clients:
      # Nextcloud
      - client_id: nextcloud
        client_name: Nextcloud
        client_secret: "{{ secrets.make_secret('pinanas.authelia.identity_providers.oidc.clients[nextcloud].secret')[:16] | authelia_password }}"
        authorization_policy: one_factor
        scopes:
          - openid
          - groups
          - email
          - profile
        redirect_uris:
          - "https://cloud.{{ pinanas.domain }}{{ ":" ~ pinanas.ports.https if pinanas.ports.https != 443 else "" }}/apps/user_oidc/code"
        response_types:
          - code
        token_endpoint_auth_method: client_secret_post

      # Jellyfin
      - client_id: jellyfin
        client_name: Jellyfin
        client_secret: "{{ secrets.make_secret('pinanas.authelia.identity_providers.oidc.clients[jellyfin].secret') | authelia_password }}"
        authorization_policy: one_factor
        scopes:
          - openid
          - groups
          - email
          - profile
        redirect_uris:
          - "https://media.{{ pinanas.domain }}{{ ":" ~ pinanas.ports.https if pinanas.ports.https != 443 else "" }}/sso/OID/r/Authelia"
        response_types:
          - code
        token_endpoint_auth_method: client_secret_post

        grant_types:
          - authorization_code
        response_types:
          - code
        token_endpoint_auth_method: client_secret_post
        require_pkce: false
        pkce_challenge_method: ''
