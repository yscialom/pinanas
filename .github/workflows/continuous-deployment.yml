name: Continuous Deployment

on:
  push:
    branches:
      - feature/**
      - develop
      - release/**


#TODO: split in jobs and use encrypted artefacts
# - artefacts: https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts
# - encrypt: https://www.tecmint.com/encrypt-decrypt-files-tar-openssl-linux/
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Disable DNS cache server to free 53/udp up
        run: |
          sudo mkdir -p /etc/systemd/resolved.conf.d
          echo -e '[Resolve]\nDNSStubListener=no' | sudo tee -a /etc/systemd/resolved.conf.d/disable-for-pinanas.conf
          sudo systemctl force-reload systemd-resolved
          sudo rm /etc/resolv.conf
          sudo ln -s ../run/systemd/resolve/resolv.conf /etc/resolv.conf

      - name: Clone
        uses: actions/checkout@v2

      - name: Prepare settings from secrets
        env:
          settings_pinanas_master_secret: "${{ secrets.settings_pinanas_master_secret }}"
          settings_pinanas_network_dns_provider_api: "${{ secrets.settings_pinanas_network_dns_provider_api }}"
          settings_pinanas_network_dns_provider_email: "${{ secrets.settings_pinanas_network_dns_provider_email }}"
          settings_pinanas_network_dns_provider_name: "${{ secrets.settings_pinanas_network_dns_provider_name }}"
          settings_pinanas_network_smtp_host: "${{ secrets.settings_pinanas_network_smtp_host }}"
          settings_pinanas_network_smtp_password: "${{ secrets.settings_pinanas_network_smtp_password }}"
          settings_pinanas_network_smtp_port: "${{ secrets.settings_pinanas_network_smtp_port }}"
          settings_pinanas_network_smtp_sender: "${{ secrets.settings_pinanas_network_smtp_sender }}"
          settings_pinanas_network_smtp_username: "${{ secrets.settings_pinanas_network_smtp_username }}"
        run: |
          mkdir dist
          envsubst <test/settings-ci.yml >dist/settings.yml

      - name: Configure
        run: cd dist && ../src/configure.sh

      - name: Start
        run: |
          cd dist
          docker-compose up -d
          while [[ $(docker container inspect netdata | jq 'map(select(.State.Status == "running")) | any') != "true" ]] ; do
              sleep 5
          done

      # requires auto detection of networking properties (hmac of default inteface, ...)
      #- name: Test dhcpd
      #  run: |
      #    offer=$(sudo dhclient -v 2>&1 | grep DHCPOFFER)

      - name: Test traefik dashboard
        run: test/traefik-dashboard.sh
