name: Continuous Deployment

on:
  workflow_dispatch: ~
  push:
    branches:
      - develop
      - release/**
  issue_comment:
    types: [created]


jobs:
  check-deploy-command:
    name: Check /deploy Command
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Event name: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Setting environment variables for comment and author"
            COMMENT='${{ github.event.comment.body }}'
            AUTHOR='${{ github.event.comment.user.login }}'
            OWNER='${{ github.repository_owner }}'
            REPO='${{ github.event.repository.name }}'
            PR_NUMBER=$(jq --raw-output .issue.number "$GITHUB_EVENT_PATH")
            if [[ "$COMMENT" == *"/deploy"* ]] && [[ "$AUTHOR" == "$OWNER" ]]; then
              echo "Authorized deploy command found from $AUTHOR"
              echo "Fetching PR info from GitHub API..."
              PR_DATA=$(gh pr view $PR_NUMBER --repo "$OWNER/$REPO" --json headRefName -q .headRefName)
              echo "proceed=true"    >>$GITHUB_OUTPUT
              echo "branch=$PR_DATA" >>$GITHUB_OUTPUT
              exit
            else
              echo "Deploy command missing or unauthorized author"
              echo "proceed=false" >>$GITHUB_OUTPUT
              exit
            fi
          else
            # For other events (push, workflow_dispatch), proceed normally
            echo "Not an issue_comment event, proceeding"
            echo "proceed=true"                     >>$GITHUB_OUTPUT
            echo "branch=${GITHUB_REF#refs/heads/}" >>$GITHUB_OUTPUT
          fi


  undeploy:
    name: Undeploy
    runs-on: ubuntu-latest
    environment: uat
    needs: check-deploy-command
    if: needs.check-deploy-command.outputs.proceed == 'true'
    steps:
      - name: Adding Known Hosts
        run: mkdir -p ~/.ssh && ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Clean workspace
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "rm -rf ~/pinanas-src"

      - name: Stop previous PiNanas
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "if [[ -f ~/pinanas/docker-compose.yaml ]] ; then cd ~/pinanas && docker compose down ; fi"

      - name: Remove docker containers, volumes, networks and images
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker container prune --force"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker volume prune --force"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker network prune --force"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker image prune --force --all"

      - name: Remove installation directory
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "sudo rm -rf -- ~/pinanas/"


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: uat
    needs: undeploy
    if: needs.check-deploy-command.outputs.proceed == 'true'
    steps:
      - name: Adding Known Hosts
        run: mkdir -p ~/.ssh && ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Clone
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check-deploy-command.outputs.branch }}

      - name: Recreate directories
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "mkdir -p ~/pinanas-src ~/pinanas"

      - name: Deploy to PiNanas UAT
        run: scp -P ${{ secrets.SSH_PORT }} -r * ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/pinanas-src/.


  install:
    name: Install
    runs-on: ubuntu-latest
    environment: uat
    needs: deploy
    if: needs.check-deploy-command.outputs.proceed == 'true'
    steps:
      - name: Adding Known Hosts
        run: mkdir -p ~/.ssh && ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Configure
        env:
          settings_pinanas_master_secret: "${{ secrets.settings_pinanas_master_secret }}"
          settings_pinanas_johndoe_password: "${{ secrets.settings_pinanas_johndoe_password }}"
          settings_pinanas_network_dns_provider_api: "${{ secrets.settings_pinanas_network_dns_provider_api }}"
          settings_pinanas_network_dns_provider_email: "${{ secrets.settings_pinanas_network_dns_provider_email }}"
          settings_pinanas_network_dns_provider_name: "${{ secrets.settings_pinanas_network_dns_provider_name }}"
          settings_pinanas_network_smtp_host: "${{ secrets.settings_pinanas_network_smtp_host }}"
          settings_pinanas_network_smtp_password: "${{ secrets.settings_pinanas_network_smtp_password }}"
          settings_pinanas_network_smtp_port: "${{ secrets.settings_pinanas_network_smtp_port }}"
          settings_pinanas_network_smtp_sender: "${{ secrets.settings_pinanas_network_smtp_sender }}"
          settings_pinanas_network_smtp_username: "${{ secrets.settings_pinanas_network_smtp_username }}"
        run: |
          env | grep ^settings_pinanas_ | ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cat >~/.ssh/environment"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "envsubst <~/pinanas-src/test/settings.yaml.d/cd.yaml >~/pinanas/settings.yaml"

      - name: Install
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && ~/pinanas-src/src/install/installer.sh && rm ~/.ssh/environment"


  start:
    name: Start
    runs-on: ubuntu-latest
    environment: uat
    needs: install
    if: needs.check-deploy-command.outputs.proceed == 'true'
    steps:
      - name: Adding Known Hosts
        run: mkdir -p ~/.ssh && ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Pull
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && docker compose pull"

      - name: Start
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && docker compose up -d --wait"

      - name: Import Let's Encrypt stagging root CA
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "curl -o ~/pinanas/letsencrypt-stg-root-x1.pem https://letsencrypt.org/certs/staging/letsencrypt-stg-root-x1.pem"
          echo -n "Nexcloud... "
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cp ~/pinanas/letsencrypt-stg-root-x1.pem ~/pinanas/nextcloud/data/files/."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker exec nextcloud occ security:certificates:import /data/letsencrypt-stg-root-x1.pem"
          echo "OK"
          echo -n "Jellyfin... "
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker exec jellyfin mkdir -p /usr/share/ca-certificates/misc"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker exec jellyfin curl -o /usr/share/ca-certificates/misc/letsencrypt-stg-root-x1.crt https://letsencrypt.org/certs/staging/letsencrypt-stg-root-x1.pem"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker exec jellyfin bash -c 'echo misc/letsencrypt-stg-root-x1.crt >> /etc/ca-certificates.conf'"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "docker exec jellyfin update-ca-certificates"
          echo "OK"
          echo -n "Immich... "
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cp ~/pinanas/letsencrypt-stg-root-x1.pem ~/pinanas/immich/config/."
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && docker compose rm --stop --force immich-server"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && yq -iy '.services.\"immich-server\".environment += [\"NODE_EXTRA_CA_CERTS=/config/letsencrypt-stg-root-x1.pem\"]' docker-compose.yaml"
          echo "OK"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && docker compose up -d --wait"

      - name: Distclean
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -C "cd ~/pinanas && ./distclean.sh"
